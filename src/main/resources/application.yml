server:
  port: ${SERVER_PORT:9000}
  error:
    include-message: never
    include-binding-errors: never
    include-stacktrace: never
    include-exception: false
  servlet:
    context-path: /
spring:
  application:
    name: ffvtraceability-auth-server
  profiles:
    active: dev
  datasource:
    url: jdbc:postgresql://${DB_HOST:127.0.0.1}:${DB_PORT:5432}/${DB_NAME:ffvtraceability}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:123456}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DB_MAX_POOL_SIZE:10}
      minimum-idle: ${DB_MIN_IDLE:5}
      idle-timeout: 300000
      connection-timeout: 20000

  sql:
    init:
      mode: ${SQL_INIT_MODE:always}
      continue-on-error: false

  jpa:
    show-sql: false
    properties:
      hibernate:
        format_sql: false

  session:
    store-type: jdbc
    jdbc:
      initialize-schema: always
      schema: classpath:org/springframework/session/jdbc/schema-postgresql.sql
      table-name: SPRING_SESSION
    timeout: 30m

#  mail:
#    host: smtp.qq.com  # 邮件服务器地址
#    port: 587            # 端口号
#    username: 8745138@qq.com
#    password: izzrlktcijgfcabb  # 邮箱授权码
#    properties:
#      mail:
#        smtp:
#          auth: true
#          starttls:
#            enable: true
#            required: true

  mail:
    host: smtp.gmail.com  # 邮件服务器地址
    port: 587            # 端口号
    username: whilliy@gmail.com
    password: nchplogyhbumjgyc
    properties:
      mail:
        debug: true
        smtp:
          connection-timeout: 30000
          timeout: 30000
          write-timeout: 30000
          auth: true
          starttls:
            enable: true
            required: true
          ssl:
            trust: smtp.gmail.com # 强制信任证书

  #给AuthorizationServerSettings设置issuer
  security:
    oauth2:
      authorization-server:
        issuer: ${AUTH_SERVER_ISSUER:http://localhost:9000}

# OAuth2安全增强配置 - 方案A：子域名共享Cookie
# 要点: 通过HttpOnly Cookie安全地在不同子域名（如 a.example.com 和 b.example.com）之间共享 refresh_token。
# 关键是正确设置 domain 属性为父域名（注意前面的点, 如 .example.com）。
oauth2:
  # Cookie安全配置
  cookie:
    # 【核心】设置父域名以允许子域名共享。生产环境必须设置为 .your-domain.com 格式。开发环境可留空。
    domain: ${OAUTH2_COOKIE_DOMAIN:}
    # 【安全】生产环境强制为 true，确保Cookie仅通过HTTPS传输。
    secure: ${OAUTH2_COOKIE_SECURE:false}
    # 【策略】Lax为默认值，适用于多数同站场景。如需支持跨站POST请求，设为None（此时secure必须为true）。
    same-site: ${OAUTH2_COOKIE_SAME_SITE:Lax}
    # 【有效期】Cookie的有效时间（秒），默认30天。
    max-age: ${OAUTH2_COOKIE_MAX_AGE:2592000}
    
  # 注意：客户端配置统一在数据库中管理（RegisteredClientRepository）
  # 不在此处重复配置，避免数据不一致
      
  # 安全策略配置
  security:
    # 是否启用HttpOnly Cookie模式
    cookie-mode-enabled: ${OAUTH2_COOKIE_MODE_ENABLED:true}
    # 是否完全禁止前端访问client_secret
    hide-client-secret: ${OAUTH2_HIDE_CLIENT_SECRET:true}
    # refresh_token存储策略: cookie | backend | hybrid
    refresh-token-strategy: ${OAUTH2_REFRESH_TOKEN_STRATEGY:cookie}


password:
  token:
    create-password-url: https://fp.ablueforce.com/change-password
    expire-in-hours: 24


# OAuth2 授权服务器配置
auth-server:
  issuer: ${AUTH_SERVER_ISSUER:http://localhost:9000}
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:8888,http://localhost:3000,http://127.0.0.1:3000,http://localhost:1023,https://al.u2511175.nyat.app:50518,https://v0-beauty-consultant-ai-interface.vercel.app,https://kzmjq05ormpml1bob042.lite.vusercontent.net}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: Authorization,Content-Type,Accept,X-Requested-With,Origin,Sec-Fetch-Mode,Sec-Fetch-Site,Sec-Fetch-Dest
    allow-credentials: true
  web-clients:
    allowed-client-ids: ${WEB_CLIENT_IDS:ffv-client,other-web-client}
    client-secrets: ${WEB_CLIENT_SECRETS:secret,other-secret}

# 安全配置
security:
  jwt:
    key-store: ${JWT_KEYSTORE_PATH:classpath:keys/jwt-signing-keys.jks}
    key-store-password: ${JWT_KEYSTORE_PASSWORD:ffvtraceability}
    key-alias: ${JWT_KEY_ALIAS:jwt-signing-key}
    private-key-passphrase: ${JWT_KEY_PASSWORD:ffvtraceability}

# 日志配置
logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    org.springframework.security: ${LOG_LEVEL_SECURITY:DEBUG}
    org.springframework.security.oauth2: ${LOG_LEVEL_OAUTH2:DEBUG}
    org.springframework.security.oauth2.server.authorization.oidc: DEBUG
    org.springframework.security.web.authentication.logout: DEBUG
    org.springframework.security.core.session: DEBUG
    org.springframework.web: ${LOG_LEVEL_WEB:INFO}
    org.dddml.ffvtraceability: ${LOG_LEVEL_APP:INFO}
#   file:
#     name: ${LOG_FILE_PATH:/var/log/ffvtraceability/auth-server.log}
#   pattern:
#     file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
#     console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

auth:
  state:
    encryption:
      password: "your-strong-password-here"
      salt: "5c0744940b5c369b"  # 16位十六进制值

# 微信登录配置
wechat:
  mp:
    app-id: ${WECHAT_APP_ID:YOUR_APP_ID}
    app-secret: ${WECHAT_APP_SECRET:YOUR_APP_SECRET}
    token: ${WECHAT_TOKEN:your-token}
    aes-key: ${WECHAT_AES_KEY:your-aes-key}
    redirect-uri: ${WECHAT_REDIRECT_URI:http://192.168.0.103:9000/wechat/callback}

# 短信服务配置
sms:
  provider: ${SMS_PROVIDER:huoshan}
  code-length: 6
  code-expiration-minutes: 5
  aliyun:
    access-key-id: ${SMS_ACCESS_KEY_ID:your-access-key-id}
    access-key-secret: ${SMS_ACCESS_KEY_SECRET:your-access-key-secret}
    sign-name: ${SMS_SIGN_NAME:your-sign-name}
    template-code: ${SMS_TEMPLATE_CODE:your-template-code}
    region: ${SMS_REGION:cn-hangzhou}
  huoshan:
    access-key-id: ${HUOSHAN_SMS_ACCESS_KEY_ID:your-access-key-id}
    secret-key: ${HUOSHAN_SMS_SECRET_KEY:your-secret-key}
    endpoint: ${HUOSHAN_SMS_ENDPOINT:https://sms.volcengineapi.com}
    sign-name: ${HUOSHAN_SMS_SIGN_NAME:your-sign-name}
    template-id: ${HUOSHAN_SMS_TEMPLATE_ID:your-template-id}
    sms-account: ${HUOSHAN_SMS_ACCOUNT:your-sms-account}
    region: ${HUOSHAN_SMS_REGION:cn-north-1}

