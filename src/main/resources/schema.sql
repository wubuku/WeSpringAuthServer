-- Users and authorities
CREATE TABLE users (
    username VARCHAR(50) NOT NULL,
    password VARCHAR(100) NOT NULL,
    enabled BOOLEAN NOT NULL,
    password_change_required BOOLEAN DEFAULT true,
    password_last_changed TIMESTAMPTZ DEFAULT NULL,
    temp_password_last_generated TIMESTAMPTZ DEFAULT NULL,
    first_login BOOLEAN DEFAULT true,
    first_name VARCHAR(50) DEFAULT NULL,
    last_name VARCHAR(50) DEFAULT NULL,
    email VARCHAR(50) DEFAULT NULL,
    department_id VARCHAR(20) DEFAULT NULL,
    from_date TIMESTAMPTZ DEFAULT NULL,
    employee_contract_number VARCHAR(50) DEFAULT NULL,
    certification_description VARCHAR(50) DEFAULT NULL,
    skill_set_description VARCHAR(255) DEFAULT NULL,
    language_skills VARCHAR(255) DEFAULT NULL,
    associated_gln VARCHAR(50) DEFAULT NULL,
    profile_image_url VARCHAR(255) DEFAULT NULL,
    direct_manager_name VARCHAR(50) DEFAULT NULL,
    employee_type_id VARCHAR(20) DEFAULT NULL,
    telephone_number VARCHAR(20) DEFAULT NULL,
    mobile_number VARCHAR(20) DEFAULT NULL,
    employee_number VARCHAR(50) DEFAULT NULL,
    created_by VARCHAR(50) DEFAULT NULL,
    created_at TIMESTAMPTZ DEFAULT NULL,
    updated_by VARCHAR(50) DEFAULT NULL,
    updated_at TIMESTAMPTZ DEFAULT NULL,
    PRIMARY KEY (username)
);

CREATE TABLE authorities (
    username VARCHAR(50) NOT NULL,
    authority VARCHAR(50) NOT NULL,
    CONSTRAINT fk_authorities_users FOREIGN KEY(username) REFERENCES users(username)
);

CREATE UNIQUE INDEX ix_auth_username ON authorities (username, authority);

-- 先删除依赖表
DROP TABLE IF EXISTS group_members;
DROP TABLE IF EXISTS group_authorities;
DROP TABLE IF EXISTS groups;

-- Groups
CREATE TABLE groups (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    group_name VARCHAR(50) NOT NULL,
    enabled BOOLEAN NOT NULL DEFAULT TRUE,
    description VARCHAR(255) DEFAULT NULL
);

CREATE TABLE group_authorities (
    group_id BIGINT NOT NULL,
    authority VARCHAR(50) NOT NULL,
    CONSTRAINT fk_group_authorities_group FOREIGN KEY(group_id) REFERENCES groups(id)
);

CREATE TABLE group_members (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    group_id BIGINT NOT NULL,
    CONSTRAINT fk_group_members_group FOREIGN KEY(group_id) REFERENCES groups(id)
);

--
-- 扩展：权限设置（for Permission Settings）
--

-- 删除旧的权限表
DROP TABLE IF EXISTS permissions;
DROP TABLE IF EXISTS authority_definitions;

-- 基础权限表
CREATE TABLE authority_definitions (
    authority_id VARCHAR(50) NOT NULL PRIMARY KEY,
    description VARCHAR(200),
    enabled BOOLEAN DEFAULT NULL
);


--
-- OAuth Server Schema
--

-- OAuth2 授权表
CREATE TABLE IF NOT EXISTS oauth2_authorization (
    id varchar(100) NOT NULL,
    registered_client_id varchar(100) NOT NULL,
    principal_name varchar(200) NOT NULL,
    authorization_grant_type varchar(100) NOT NULL,
    authorized_scopes varchar(1000) DEFAULT NULL,
    attributes text DEFAULT NULL,
    state varchar(500) DEFAULT NULL,
    authorization_code_value text DEFAULT NULL,
    authorization_code_issued_at TIMESTAMPTZ DEFAULT NULL,
    authorization_code_expires_at TIMESTAMPTZ DEFAULT NULL,
    authorization_code_metadata text DEFAULT NULL,
    access_token_value text DEFAULT NULL,
    access_token_issued_at TIMESTAMPTZ DEFAULT NULL,
    access_token_expires_at TIMESTAMPTZ DEFAULT NULL,
    access_token_metadata text DEFAULT NULL,
    access_token_type varchar(100) DEFAULT NULL,
    access_token_scopes varchar(1000) DEFAULT NULL,
    refresh_token_value text DEFAULT NULL,
    refresh_token_issued_at TIMESTAMPTZ DEFAULT NULL,
    refresh_token_expires_at TIMESTAMPTZ DEFAULT NULL,
    refresh_token_metadata text DEFAULT NULL,
    oidc_id_token_value text DEFAULT NULL,
    oidc_id_token_issued_at TIMESTAMPTZ DEFAULT NULL,
    oidc_id_token_expires_at TIMESTAMPTZ DEFAULT NULL,
    oidc_id_token_metadata text DEFAULT NULL,
    oidc_id_token_claims text DEFAULT NULL,
    user_code_value text DEFAULT NULL,
    user_code_issued_at TIMESTAMPTZ DEFAULT NULL,
    user_code_expires_at TIMESTAMPTZ DEFAULT NULL,
    user_code_metadata text DEFAULT NULL,
    device_code_value text DEFAULT NULL,
    device_code_issued_at TIMESTAMPTZ DEFAULT NULL,
    device_code_expires_at TIMESTAMPTZ DEFAULT NULL,
    device_code_metadata text DEFAULT NULL,
    PRIMARY KEY (id)
);

-- OAuth2 注册客户端表
CREATE TABLE IF NOT EXISTS oauth2_registered_client (
    id varchar(100) NOT NULL,
    client_id varchar(100) NOT NULL,
    client_id_issued_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
    client_secret varchar(200) DEFAULT NULL,
    client_secret_expires_at TIMESTAMPTZ DEFAULT NULL,
    client_name varchar(200) NOT NULL,
    client_authentication_methods varchar(1000) NOT NULL,
    authorization_grant_types varchar(1000) NOT NULL,
    redirect_uris varchar(1000) DEFAULT NULL,
    post_logout_redirect_uris varchar(1000) DEFAULT NULL,
    scopes varchar(1000) NOT NULL,
    client_settings varchar(2000) NOT NULL,
    token_settings varchar(2000) NOT NULL,
    PRIMARY KEY (id)
);
-- 删除旧表
DROP TABLE IF EXISTS password_tokens;
-- 密码重置表
CREATE TABLE if not EXISTS password_tokens (
    token VARCHAR(50) NOT NULL PRIMARY KEY,
    username VARCHAR(30) NOT NULL,
    type VARCHAR(20) NOT NULL,
    token_created_at TIMESTAMPTZ NOT NULL,
    password_created_at TIMESTAMPTZ DEFAULT NULL
);

-- User Identification Table for multiple login methods
CREATE TABLE IF NOT EXISTS user_identifications (
    user_identification_type_id VARCHAR(50) NOT NULL,
    username VARCHAR(50) NOT NULL,
    identifier VARCHAR(100) NOT NULL,
    verified BOOLEAN DEFAULT FALSE,
    verified_at TIMESTAMPTZ DEFAULT NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_identification_type_id, username),
    CONSTRAINT fk_user_identifications_users FOREIGN KEY(username) REFERENCES users(username)
);

-- Create an index on the identifier column for quick lookups
CREATE UNIQUE INDEX IF NOT EXISTS idx_user_identifications_type_identifier ON user_identifications (user_identification_type_id, identifier);

-- SMS Verification Tables
DROP TABLE IF EXISTS sms_verification_codes;
DROP TABLE IF EXISTS sms_send_records;

CREATE TABLE IF NOT EXISTS sms_verification_codes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    phone_number VARCHAR(20) NOT NULL,
    code VARCHAR(6) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    expire_time TIMESTAMPTZ NOT NULL,
    used BOOLEAN DEFAULT FALSE,
    CONSTRAINT uc_phone_code UNIQUE (phone_number, code)
);

CREATE INDEX IF NOT EXISTS idx_sms_phone_expire ON sms_verification_codes (phone_number, expire_time);

CREATE TABLE IF NOT EXISTS sms_send_records (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    phone_number VARCHAR(20) NOT NULL,
    send_time TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    provider VARCHAR(20) DEFAULT NULL,
    success BOOLEAN DEFAULT TRUE,
    message VARCHAR(255) DEFAULT NULL
);

CREATE INDEX IF NOT EXISTS idx_sms_phone_time ON sms_send_records (phone_number, send_time);
