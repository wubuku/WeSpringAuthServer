# WeSpringAuthServer 开发规则与注意事项

## 🔒 安全开发原则

### 权限控制
- **所有管理API必须有权限保护**: `/auth-srv/**` 路径下的所有端点都需要 `ROLE_ADMIN` 权限
- **页面访问控制**: 管理页面必须使用 `sec:authorize="hasRole('ADMIN')"` 保护
- **双重验证**: API端点和页面都要有权限控制，不能只依赖前端限制
- **当前用户保护**: 用户不能禁用自己的账户，需要在前后端都做检查

### 敏感信息处理
- **日志安全**: 绝对不能在日志中记录明文密码，使用 `[HIDDEN]` 替代
- **数据脱敏**: 手机号、身份证号等敏感信息在管理界面要脱敏显示
- **SQL注入防护**: 始终使用JdbcTemplate的参数化查询，不要字符串拼接
- **XSS防护**: 依赖Thymeleaf模板引擎的自动转义

### 架构安全考虑
- **HTTPS处理**: 生产环境使用负载均衡器处理HTTPS，应用本身运行HTTP
- **不要添加HSTS**: 避免与负载均衡器的HTTPS处理冲突
- **CORS配置**: 根据实际前端需求限制允许的HTTP方法
- **文件上传**: 限制文件大小(1MB)和文件名路径遍历攻击

## 🏗️ 代码规范

### Spring Security配置
- **多FilterChain**: 移动端API使用STATELESS，Web端使用IF_REQUIRED
- **路径匹配**: 使用 `securityMatcher()` 明确指定每个FilterChain的作用范围
- **权限粒度**: 管理功能统一要求ROLE_ADMIN，保持保守安全策略
- **⚠️ 配置完整性**: 绝对不能注释掉关键安全配置，如API FilterChain或具体权限控制
- **⚠️ 测试配置**: 开发测试时不能用 `permitAll()` 替代具体权限控制，会导致生产安全问题

### Controller设计
- **路径唯一性**: 确保每个URL路径只映射到一个Controller方法，避免 "Ambiguous mapping" 错误
- **认证检查**: 所有Controller都要检查用户认证状态，未认证用户应重定向到登录页面
- **异常处理**: Controller要处理各种异常情况，包括认证失败、权限不足等

### 数据库操作
- **标识类型**: 系统中的 `user_identification_type_id` 都是大写格式
  - `MOBILE_NUMBER`, `WECHAT_OPENID`, `WECHAT_UNIONID`, `WECHAT_MOBILE_NUMBER`, `EMAIL`, `ID_CARD`
- **大小写处理**: 在Java代码中统一转换为大写进行匹配 `identificationType.toUpperCase()`
- **NULL处理**: 验证状态字段可能为NULL，要正确处理三种状态（true/false/null）

### API设计
- **数据处理**: 复杂的数据格式化在Java代码中完成，不在SQL中使用特殊字符
- **错误处理**: 使用统一的异常处理，避免暴露内部错误信息
- **URL命名**: API路径要符合RESTful规范，如 `/api/authorities/` 而不是 `/api/authoritys/`

## 🎨 前端开发

### 页面布局
- **表格设计**: 新增列时要考虑总宽度，设置合理的列宽和最小宽度
- **响应式**: 使用 `overflow-x: auto` 处理表格水平滚动
- **容器宽度**: 根据内容调整容器最大宽度，避免内容溢出

### 数据显示
- **借鉴现有模式**: 新功能要参考现有实现方式（如Direct Authorities列的badge显示）
- **状态显示**: 使用图标和颜色区分状态（✓绿色已验证，⚠橙色未验证，无符号为null）
- **文本优化**: 在空间受限时适当缩短显示文本

### JavaScript规范
- **CSRF保护**: 所有POST请求都要包含CSRF token
- **错误处理**: 统一的错误提示和成功提示机制
- **数据处理**: 前端数据处理要考虑各种边界情况（null、undefined、空字符串）

### Thymeleaf模板
- **NULL检查**: 对可能为null的对象要做检查，如 `th:if="${_csrf != null}"`
- **CSRF Token**: 登录表单等需要CSRF保护的表单要正确包含token
- **错误页面**: 为常见HTTP状态码(404, 500等)创建友好的错误页面

## 📝 开发流程

### 规划先行
- **重要变更必须先做规划**: 在 `/docs/drafts/` 目录创建详细规划文档
- **规划内容**: 包括需求分析、实现方案、安全评估、风险评估、验收标准
- **评审确认**: 规划完成后必须经过评审确认才能开始实施

### 实施步骤
- **分阶段实施**: Phase 1(后端) → Phase 2(前端) → Phase 3(测试)
- **安全优先**: 每个阶段都要考虑安全影响
- **文档同步**: 重要变更要同步更新相关文档

### 测试准备
- **测试数据**: 为新功能准备完整的测试数据SQL脚本
- **边界测试**: 测试各种数据状态和边界情况
- **启动测试**: 重大修改后必须测试应用能否正常启动
- **功能测试**: 验证关键功能（登录、权限控制等）是否正常工作

### 重构注意事项
- **删除重复**: 重构时要彻底删除重复的Controller、配置等，避免路径冲突
- **配置一致性**: 确保SecurityConfig等关键配置文件的完整性
- **依赖关系**: 删除文件前要检查是否有其他地方引用
- **测试验证**: 重构后要全面测试，确保没有破坏现有功能

## 🔧 技术细节

### Jackson序列化
- **双ObjectMapper策略**: OAuth2和业务逻辑使用不同的ObjectMapper
- **避免activateDefaultTyping()**: 会导致安全问题和类型转换错误
- **自定义类注解**: 确保UserDetails等自定义类有完整的Jackson注解

### 数据处理
- **脱敏规则**: 手机号(139****8888)、身份证(110***********1234)、邮箱(abc***@example.com)
- **微信标识**: OpenID和UnionID不脱敏，便于管理员调试

### 性能考虑
- **查询优化**: 使用LEFT JOIN和聚合函数避免N+1查询
- **索引利用**: 确保查询能利用现有索引
- **数据分页**: 大数据量时考虑分页显示

### 异常处理
- **全局异常处理**: 使用 `@ControllerAdvice` 统一处理异常
- **请求类型区分**: 根据请求类型(AJAX/普通)返回JSON或HTML响应
- **错误页面**: 为不同HTTP状态码提供相应的错误页面模板
- **日志记录**: 异常发生时要记录详细日志，但不暴露敏感信息给用户

## 🚨 常见陷阱

### 权限控制陷阱
- ❌ 只在前端做权限控制
- ❌ 忘记保护新增的API端点
- ❌ 没有考虑用户禁用自己账户的情况
- ❌ 注释掉安全配置用于"临时测试"
- ❌ 用 `permitAll()` 替代具体权限控制

### Spring Security陷阱
- ❌ 注释掉API安全配置导致权限失效
- ❌ 配置不完整导致CSRF token为null
- ❌ FilterChain顺序错误导致权限检查失效
- ❌ 路径匹配规则冲突

### Controller设计陷阱
- ❌ 多个Controller映射同一URL路径
- ❌ 假设用户已认证而不做检查
- ❌ 异常处理不当导致500错误
- ❌ 删除Controller时不检查路径冲突

### 数据处理陷阱
- ❌ 在SQL中使用特殊字符（✓⚠）
- ❌ 忘记处理NULL值
- ❌ 大小写不匹配导致的逻辑错误

### UI/UX陷阱
- ❌ 新增列后不考虑表格宽度
- ❌ 不参考现有UI模式
- ❌ 忘记响应式设计
- ❌ Thymeleaf模板中不检查null值

### 安全陷阱
- ❌ 在日志中记录敏感信息
- ❌ 生产环境配置不当（如HSTS与负载均衡器冲突）
- ❌ 忘记对用户输入进行验证和脱敏

### 重构陷阱
- ❌ 删除文件不彻底导致路径冲突
- ❌ 修改配置不完整导致功能失效
- ❌ 重构后不测试关键功能
- ❌ API路径拼写错误

## 🔍 故障排查流程

### 启动失败
1. **检查路径冲突**: 搜索 "Ambiguous mapping" 错误，查找重复的URL映射
2. **检查配置完整性**: 确认SecurityConfig等关键配置没有被注释
3. **检查依赖关系**: 确认删除的文件没有被其他地方引用

### 运行时错误
1. **500错误排查**: 检查Controller的认证检查、异常处理
2. **权限错误**: 确认SecurityConfig的权限配置正确
3. **CSRF错误**: 检查模板中的CSRF token处理

### 功能异常
1. **登录问题**: 检查SecurityConfig的登录配置
2. **权限问题**: 确认用户角色和权限配置
3. **页面错误**: 检查Controller和模板的匹配

## 📚 参考资源

### 文档位置
- 安全审计文档: `/docs/drafts/`
- 规划文档: `/docs/drafts/`
- 测试数据: `/docs/drafts/test-data-*.sql`

### 关键配置文件
- Spring Security: `src/main/java/org/dddml/ffvtraceability/auth/config/SecurityConfig.java`
- 数据库Schema: `src/main/resources/schema.sql`
- 用户管理: `src/main/resources/templates/user-management.html`
- 全局异常处理: `src/main/java/org/dddml/ffvtraceability/auth/exception/GlobalExceptionHandler.java`

### 重要常量
```java
// 标识类型常量（大写）
MOBILE_NUMBER, WECHAT_OPENID, WECHAT_UNIONID, WECHAT_MOBILE_NUMBER, EMAIL, ID_CARD
```

### 关键检查点
- SecurityConfig.java 中的 FilterChain 配置完整性
- Controller 路径映射唯一性
- 模板中的 CSRF token 处理
- 异常处理器的请求类型区分

## 🎯 最佳实践

1. **安全第一**: 任何功能都要先考虑安全影响
2. **规划先行**: 重要变更必须先做详细规划
3. **参考现有**: 新功能要借鉴现有实现模式
4. **测试充分**: 准备完整的测试数据和场景
5. **文档同步**: 重要变更要更新相关文档
6. **保守策略**: 权限控制采用保守策略，宁可严格也不要宽松
7. **用户体验**: 在保证安全的前提下优化用户体验
8. **性能考虑**: 避免N+1查询，合理使用索引
9. **错误处理**: 统一的错误处理和用户提示
10. **代码审查**: 重要变更要经过代码审查
11. **配置完整**: 绝不能为了"临时测试"注释关键安全配置
12. **重构谨慎**: 重构时要彻底删除重复代码，避免冲突
13. **启动验证**: 重大修改后必须验证应用能否正常启动
14. **功能测试**: 每次重大修改都要测试关键功能

---

**记住**: 这是一个企业级认证授权服务器，安全性是最高优先级！任何"临时"的安全配置修改都可能导致生产环境安全问题。 